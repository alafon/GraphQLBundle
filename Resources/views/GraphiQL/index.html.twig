<!DOCTYPE html>
<html>
<head>
  {% block head %}
  {% block style %}
  <style>
    html, body {
      width: 100%;
      height: 100%;
      margin: 0;
      overflow: hidden;
    }
  </style>
  <link href="https://unpkg.com/graphiql@{{ versions.graphiql }}/graphiql.css" rel="stylesheet">
  {% endblock style %}
  <script src="https://unpkg.com/whatwg-fetch@{{ versions.fetch }}/fetch.js"></script>
  <script src="https://unpkg.com/react@{{ versions.react }}/dist/react.min.js"></script>
  <script src="https://unpkg.com/react-dom@{{ versions.react }}/dist/react-dom.min.js"></script>
  <script src="https://unpkg.com/graphiql@{{ versions.graphiql }}/graphiql.min.js"></script>
  <title>{% block title %}GraphiQL{% endblock title %}</title>
  {% endblock head %}
</head>
<body>
  {% block body %}
  {% block body_loading %}Loading...{% endblock body_loading %}
  {% block body_script %}
  <script>
    var endpoint = {{ endpoint | json_encode | raw }}

    function graphQLFetcher(params) {
      var headers

      {% block graphql_fetcher_headers %}
      headers = {
        "Accept": "application/json",
        "Content-Type": "application/json",
      }
      {% endblock graphql_fetcher_headers %}

      return fetch(endpoint, {
        method: "post",
        headers: headers,
        body: JSON.stringify(params),
        credentials: 'include',
      }).then((res) => {
        {% if app.debug %}
          var xdebugToken = res.headers.get('X-Debug-Token')
          if (typeof Sfjs !== "undefined" && xdebugToken) {
            var toolbarElement = document.querySelector('.sf-toolbar')
            var debugUrlPattern = "{{ url('_wdt', {'token': '__TOKEN__'}) }}"
            Sfjs.load(
                toolbarElement.id,
                debugUrlPattern.replace('__TOKEN__', xdebugToken ),
                function(xhr, el) {

                  /* Evaluate embedded scripts inside the toolbar */
                    var i, scripts = [].slice.call(el.querySelectorAll('script'));

                    for (i = 0; i < scripts.length; ++i) {
                        eval(scripts[i].firstChild.nodeValue);
                    }

                    el.style.display = -1 !== xhr.responseText.indexOf('sf-toolbarreset') ? 'block' : 'none';

                    if (el.style.display == 'none') {
                        return;
                    }

                    if (Sfjs.getPreference('toolbar/displayState') == 'none') {
                        document.getElementById('sfToolbarMainContent-'+xdebugToken).style.display = 'none';
                        document.getElementById('sfToolbarClearer-'+xdebugToken).style.display = 'none';
                        document.getElementById('sfMiniToolbar-'+xdebugToken).style.display = 'block';
                    } else {
                        document.getElementById('sfToolbarMainContent-'+xdebugToken).style.display = 'block';
                        document.getElementById('sfToolbarClearer-'+xdebugToken).style.display = 'block';
                        document.getElementById('sfMiniToolbar-'+xdebugToken).style.display = 'none';
                    }

                    Sfjs.renderAjaxRequests();

                  /* Handle toolbar-info position */
                    var toolbarBlocks = [].slice.call(el.querySelectorAll('.sf-toolbar-block'));
                    for (i = 0; i < toolbarBlocks.length; ++i) {
                        toolbarBlocks[i].onmouseover = function () {
                            var toolbarInfo = this.querySelectorAll('.sf-toolbar-info')[0];
                            var pageWidth = document.body.clientWidth;
                            var elementWidth = toolbarInfo.offsetWidth;
                            var leftValue = (elementWidth + this.offsetLeft) - pageWidth;
                            var rightValue = (elementWidth + (pageWidth - this.offsetLeft)) - pageWidth;

                          /* Reset right and left value, useful on window resize */
                            toolbarInfo.style.right = '';
                            toolbarInfo.style.left = '';

                            if (elementWidth > pageWidth) {
                                toolbarInfo.style.left = 0;
                            }
                            else if (leftValue > 0 && rightValue > 0) {
                                toolbarInfo.style.right = (rightValue * -1) + 'px';
                            } else if (leftValue < 0) {
                                toolbarInfo.style.left = 0;
                            } else {
                                toolbarInfo.style.right = '0px';
                            }
                        };
                    }
                    Sfjs.addEventListener(document.getElementById('sfToolbarHideButton-'+xdebugToken), 'click', function (event) {
                        event.preventDefault();

                        var p = this.parentNode;
                        p.style.display = 'none';
                        (p.previousElementSibling || p.previousSibling).style.display = 'none';
                        document.getElementById('sfMiniToolbar-'+xdebugToken).style.display = 'block';
                        Sfjs.setPreference('toolbar/displayState', 'none');
                    });
                    Sfjs.addEventListener(document.getElementById('sfToolbarMiniToggler-'+xdebugToken), 'click', function (event) {
                        event.preventDefault();

                        var elem = this.parentNode;
                        if (elem.style.display == 'none') {
                            document.getElementById('sfToolbarMainContent-'+xdebugToken).style.display = 'none';
                            document.getElementById('sfToolbarClearer-'+xdebugToken).style.display = 'none';
                            elem.style.display = 'block';
                        } else {
                            document.getElementById('sfToolbarMainContent-'+xdebugToken).style.display = 'block';
                            document.getElementById('sfToolbarClearer-'+xdebugToken).style.display = 'block';
                            elem.style.display = 'none'
                        }

                        Sfjs.setPreference('toolbar/displayState', 'block');
                    })
                },
                function(xhr) {
                    if (xhr.status !== 0) {
                        confirm('An error occurred while loading the web debug toolbar (' + xhr.status + ': ' + xhr.statusText + ').\n\nDo you want to open the profiler?') && (window.location = '{{ path("_profiler", { "token": "__TOKEN__" }) }}'.replace('__TOKEN__', xdebugToken));
                    }
                },
                { maxTries: 5 }
            )
          }
        {% endif %}
        return res.text()
      }).then((body) => {
        try {
          return JSON.parse(body)
        } catch (err) {
          return body
        }
      })
    }

    ReactDOM.render(
      React.createElement(GraphiQL, {
        fetcher: graphQLFetcher
      }),
      document.body
    )
  </script>
  {% endblock body_script %}
  {% endblock body %}
</body>
</html>
